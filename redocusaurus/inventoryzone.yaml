openapi: 3.1.1
info:
  title: Zone Part of Chip-in Inventory API
  version: 1.0.0
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://127.0.0.1:8080
security:
  - bearerAuth: []
tags:
  - name: zone
    description: API Gateway で外部に露出するDNS上のゾーン
  - name: subdomain
    description: ゾーンに紐づくサブドメイン。
paths:
  /realms/{realm}/zones:
    put:
      tags:
        - zone
      summary: Update an existing zone.
      operationId: updateZone
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent zone in the SPN
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zone'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
        '400':
          description: Invalid URN supplied
        '404':
          description: Zone not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - zone
      summary: Add a new zone to the API gateway.
      operationId: addZone
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new zone in the relam
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Zone'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - zone
      summary: Finds Zones
      operationId: listZones
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: Query parameters for filtering zones
          required: false
          schema:
            $ref: '#/components/schemas/QueryParameter'
      responses:
        '200':
          description: |-
            Successful operation, returns a list of zones.
            If no zones are found, an empty array is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Zone'
        '400':
          description: Invalid status value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /realms/{realm}/zones/{zone}:
    get:
      tags:
        - zone
      summary: Find zone.
      description: Returns a single zone.
      operationId: getZone
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
        - name: zone
          in: path
          description: zone to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation, return the contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
        '400':
          description: Invalid zone supplied
        '404':
          description: Zone not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - zone
      summary: Deletes a zone.
      operationId: deleteZone
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
        - name: zone
          in: path
          description: zone to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Zone deleted. Returns the deleted contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
        '400':
          description: Invalid zone value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /realms/{realm}/zones/{zone}/subdomains:
    put:
      tags:
        - subdomain
      summary: Update an existing subdomain.
      operationId: updateSubdomain
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
        - name: zone
          in: path
          description: Name of zone which subdomain belogs to
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent subdomain in the API gateway.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subdomain'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subdomain'
        '400':
          description: Invalid Name supplied
        '404':
          description: Virtual Host not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - subdomain
      summary: Add a new subdomain to the zone.
      operationId: addSubdomain
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
        - name: zone
          in: path
          description: Name of zone which subdomain belogs to
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new subdomain in the zone
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subdomain'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subdomain'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - subdomain
      summary: Find Subdomains
      operationId: listSubdomains
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
        - name: zone
          in: path
          description: Name of zone which subdomain belogs to
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: Query parameters for filtering subdomains
          required: false
          schema:
            $ref: '#/components/schemas/QueryParameter'
      responses:
        '200':
          description: |-
            Successful operation, returns a list of subdomains.
            If no subdomains are found, an empty array is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subdomain'
        '400':
          description: Invalid query parameters
        '404':
          description: realm or zone not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /realms/{realm}/zones/{zone}/subdomains/{subdomain}:
    get:
      tags:
        - subdomain
      summary: Find subdomain by name.
      operationId: getSubdomainByName
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
        - name: zone
          in: path
          description: Name of zone which subdomain belogs to
          required: true
          schema:
            type: string
        - name: subdomain
          in: path
          description: Name of subdomain to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation, return the contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subdomain'
        '400':
          description: Invalid Name supplied
        '404':
          description: Virtual Host not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - subdomain
      summary: Deletes a subdomain.
      operationId: deleteSubdomain
      parameters:
        - name: realm
          in: path
          description: relam which zone belogs to
          required: true
          schema:
            type: string
        - name: zone
          in: path
          description: Name of zone which subdomain belogs to
          required: true
          schema:
            type: string
        - name: subdomain
          in: path
          description: Virtual Host URN to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation, return the deleted contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subdomain'
        '400':
          description: Invalid Name value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Zone:
      type: object
      description: >-
        ゾーンは、API Gateway
        内のDNSレコードを管理するための論理的なグループであり、仮想ホストのFQDNを収容できる。また、サブドメインを作成し、ゾーン内のFQDNをグループ化することができる。

        特に master レルムのゾーンは、他のレルムにサブドメインを貸し出すことができる。

        各ゾーンは、特定のレルムに属し、そのレルム内で一意の名前を持つ。

        ゾーンは、DNSプロバイダやACME証明書プロバイダと連携して、DNSレコードやSSL/TLS証明書の管理を行う。
      required:
        - zone
        - title
      properties:
        zone:
          type: string
          format: hostname
          description: |-
            ゾーンの名前。FQDN のサフィックスとして使用される。
            文字列は小文字英字、数字、ハイフン、ピリオドのみを含むことができる。
          example: example.com
        title:
          type: string
          description: ゾーンの日本語名称です。
          example: CMSシステム検証環境ゾーン
        description:
          type: string
          description: ゾーンの説明文ですです。
          example: CMSシステムの検証環境用のゾーンです。
        realm:
          type: string
          readOnly: true
          format: urn
          description: ゾーンが属するレルムの名前。
        urn:
          type: string
          readOnly: true
          format: urn
          description: ゾーンのURN。形式は `urn:chip-in:zone:{realm-name}:{zone-name}` である。
          example: urn:chip-in:zone:example-realm:example.com
        dnsProvider:
          type: string
          description: ゾーンのDNSレコードを管理するためのDNSプロバイダのURN。
          example: urn:chip-in:service:example-realm:example-zone-route53
        acmeCertificateProvider:
          type: string
          description: ゾーンのSSL/TLS証明書を自動的に取得するためのACME証明書プロバイダのURL
          example: https://acme-v02.api.letsencrypt.org/directory
      additionalProperties: false
    Subdomain:
      type: object
      description: |-
        サブドメインは、ゾーン内で定義され、そのFQDNをサフィックスとする仮想ホストをグループ化して収容することができる。
        各サブドメインは、特定のゾーンに属し、そのゾーン内で一意の名前を持つ。
        master レルムのサブドメインは、他のレルムにサブドメインを貸し出すことができる。
        サブドメイン名"@"はゾーンのFQDNを表し、ゾーン直下の仮想ホストを収容する。
      required:
        - name
        - title
      properties:
        name:
          type: string
          pattern: ^([a-z0-9][a-z0-9-]*|@)$
          description: >-
            サブドメインの名前。ゾーン名と結合して FQDN を得ることができる。

            文字列は小文字英字、数字、ハイフンのみを含むことができる。

            ただし、先頭がハイフンであってはならない。

            たとえば、 stg というサブドメイン名でゾーンの名前が example.com の場合、

            stg.example.com というサブドメインを構成し、www.stg.example.com,
            login.stg.example.com  というような

            FQDN の仮想ホストを収容することができる。

            特別なサブドメイン名 "@" は、ゾーンのFQDNそのものを表し、ゾーン直下の仮想ホストを収容する。
          example: stg
        fqdn:
          type: string
          readOnly: true
          format: hostname
          description: |-
            サブドメインの完全修飾ドメイン名(FQDN)。
            たとえば、 stg.example.com のように、ゾーン名と結合して得られる。
            このFQDNは、サブドメイン内の仮想ホストのFQDNのベースとなる。
          example: stg.example.com
        zone:
          type: string
          readOnly: true
          format: urn
          description: |-
            このサブドメインが属するゾーンのURN。
            ゾーンは、サブドメインのFQDNのサフィックスとして使用される。
            たとえば、 stg.example.com の場合、ゾーンは example.com となる。
          example: urn:chip-in:zone:example-realm:example.com
        urn:
          type: string
          readOnly: true
          format: urn
          description: >-
            サブドメインのURN。形式は
            `urn:chip-in:subdomain:{realm-name}:{zone-name}:{subdomain-name}`
            である。
          example: urn:chip-in:subdomain:example-realm:example.com:stg
        title:
          type: string
          description: サブドメインの名称です。
          example: CMSシステム
        description:
          type: string
          description: サブドメインの説明文です。
          example: CMSシステムのWebUI を提供するサブドメインです。
        destinationRealm:
          type: string
          description: このサブドメインの貸出先レルムののURN。
          example: urn:chip-in:realm:example-realm
        shareCookie:
          type: boolean
          default: false
          description: |-
            このフラグが指定されると、配下の仮想ホストの間でセッション Cookie が共有される。
            すなわち、仮想ホストから発行せれるセッション Cookie の domain 属性にはサブドメインのFQDNが指定される。
            デフォルトでは Cookie に Domain 属性は設定されない。
            サブドメイン配下の仮想ホストのアクセスログ間でセッションによる串刺しが可能になり、シングルサインオンも実装される。
            OIDCやSAMLによるシングルサインオンとは異なり、認証サーバへのリダイレクトは不要となる。
          example: true
      additionalProperties: false
    QueryParameter:
      type: object
      additionalProperties:
        oneOf:
          - type: string
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
      additionalProperties: false
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
