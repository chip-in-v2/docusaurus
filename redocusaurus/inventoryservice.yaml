openapi: 3.1.1
info:
  title: Service Part of Chip-in Inventory API
  version: 1.0.0
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://127.0.0.1:8080
security:
  - bearerAuth: []
tags:
  - name: service
    description: SPN経由で提供されるマイクロサービス
paths:
  /realms/{realm}/hubs/{hubName}/services:
    put:
      tags:
        - service
      summary: Update an existing service.
      operationId: updateService
      parameters:
        - name: realm
          in: path
          description: relam which service belogs to
          required: true
          schema:
            type: string
        - name: hubName
          in: path
          description: Name of hub which service belogs to
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent service in the SPN
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Invalid contents is supplied
        '404':
          description: Realm or SPN Hub or Service is not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - service
      summary: Add a new service to the SPN.
      operationId: addService
      parameters:
        - name: realm
          in: path
          description: relam which service belogs to
          required: true
          schema:
            type: string
        - name: hubName
          in: path
          description: Name of hub which service belogs to
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new service in the realm
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        required: true
      responses:
        '200':
          description: Successful operation, return the new contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Invalid contents is supplied
        '404':
          description: Realm or SPN Hub or Service is not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - service
      summary: Finds Services
      operationId: listServices
      parameters:
        - name: realm
          in: path
          description: relam which service belogs to
          required: true
          schema:
            type: string
        - name: hubName
          in: path
          description: Name of hub which service belogs to
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: Query parameters for filtering services
          required: false
          schema:
            $ref: '#/components/schemas/QueryParameter'
      responses:
        '200':
          description: |-
            Successful operation, returns a list of services.
            If no services are found, an empty array is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '400':
          description: Invalid status value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /realms/{realm}/hubs/{hubName}/services/{serviceName}:
    get:
      tags:
        - service
      summary: Find service by urn.
      operationId: getServiceByName
      parameters:
        - name: realm
          in: path
          description: relam which service belogs to
          required: true
          schema:
            type: string
        - name: hubName
          in: path
          description: Name of hub which service belogs to
          required: true
          schema:
            type: string
        - name: serviceName
          in: path
          description: URN of service to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation, return the contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Invalid URN supplied
        '404':
          description: Service not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - service
      summary: Deletes a service.
      operationId: deleteService
      parameters:
        - name: realm
          in: path
          description: relam which service belogs to
          required: true
          schema:
            type: string
        - name: hubName
          in: path
          description: Name of hub which service belogs to
          required: true
          schema:
            type: string
        - name: serviceName
          in: path
          description: Service URN to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Service deleted. Returns the deleted contents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Invalid URN value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Service:
      required:
        - name
        - urn
        - title
        - realm
        - provider
        - consumers
      type: object
      properties:
        name:
          type: string
          description: |-
            サービスの名前。URN の一部として使用される。
            ただし、先頭がハイフンであってはならない。
          example: authz-rbac
        hub:
          type: string
          readOnly: true
          format: urn
          description: サービスが接続される SPN Hub のURN。
          example: urn:chip-in:network:example-realm:hub1
        urn:
          type: string
          readOnly: true
          description: |-
            サービスのURN。URNは、サービスを一意に識別するための文字列で、以下の形式で構成される。<br/>
            urn:chip-in:service:{realm}:{hubName}:{name}
          example: urn:chip-in:service:example-realm:hub1:authz-rbac
        title:
          type: string
          description: |-
            サービスの日本語名称です。URN の一部として使用される。
            文字列は日本語を含むことができる。
          example: CMSシステム認可サービス
        description:
          type: string
          description: |-
            サービスの説明文です。URN の一部として使用される。
            文字列は日本語を含むことができる。
          example: CMSシステムの認可サービスです。
        realm:
          type: string
          description: サービスが属するレルムの名前。
        availabilityManagement:
          type: object
          required:
            - clusterManagerUrn
            - serviceId
          description: コンテナクラスタ内でマイクロサービスのスケジュール起動、オンデマンド起動を行うためのパラメータ
          properties:
            clusterManagerUrn:
              type: string
              description: このサービスを起動できるコンテナクラスタのクラスタマネージャサービスの URN
            serviceId:
              type: string
              description: クラスタ内でのマイクロサービスのID
            startAt:
              type: string
              description: 定時起動する場合の起動スケジュールの CRON 式
              example: 0 22 ? * SUN-THU *
            stopAt:
              type: string
              description: 定時停止する場合の起動スケジュールの CRON 式
              example: 0 9 ? * MON-FRI *
            ondemandStart:
              type: boolean
              description: オンデマンド起動とするか否か。デフォルトは true
            idleTimeout:
              type: integer
              description: 通信がない状態が一定時間続くとマイクロ。 ondemadStart が true の場合のみ有効
          additionalProperties: false
        singleton:
          type: boolean
          example: true
        provider:
          type: string
          example: oidc-authz-provider
        consumers:
          type: array
      additionalProperties: false
    QueryParameter:
      type: object
      additionalProperties:
        oneOf:
          - type: string
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
      additionalProperties: false
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
