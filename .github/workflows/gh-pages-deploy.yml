name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main
  repository_dispatch:
    types: [docs-updated]

permissions:
  contents: write
  packages: read

jobs:
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js for GitHub Packages
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'
          # This sets the scope for your organization's packages
          scope: '@${{ github.repository_owner }}'

      - name: Install dependencies
        run: |
          npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Repositories
        id: get-repos
        run: |
          echo "Fetching repositories from ${{ github.repository_owner }} organization..."
          REPOS=$(curl -s -H "Authorization: token ${{ secrets.PAT_FOR_DISPATCH }}" "https://api.github.com/orgs/${{ github.repository_owner }}/repos" | jq -r '.[].name' | xargs)
          echo "::set-output name=repos::$REPOS"

      - name: Download Docs Zips
        id: download-zips
        run: |
          cd root
          echo "Downloading docs.zip from repositories..."
          mkdir -p docs-source
          for repo in ${{ steps.get-repos.outputs.repos }}; do
            echo "Processing repository: $repo"
            RELEASE=$(curl -s -H "Authorization: token ${{ secrets.PAT_FOR_DISPATCH }}" "https://api.github.com/repos/${{ github.repository_owner }}/$repo/releases/latest")
            if [ $(echo "$RELEASE" | jq -r '.status') = "404" ]; then
              echo "No released asset"
            else
              ASSET_ID=$(echo "$RELEASE" | jq -r '.assets[] | select(.name == "docs.zip") | .id')
              if [ -n "$ASSET_ID" ]; then
                echo "Found docs.zip in $repo"
                curl -s -L -H "Authorization: token ${{ secrets.PAT_FOR_DISPATCH }}" -H "Accept: application/octet-stream" "https://api.github.com/repos/${{ github.repository_owner }}/$repo/releases/assets/$ASSET_ID" > docs-source/$repo.zip
                unzip -o docs-source/$repo.zip
                rm docs-source/$repo.zip
              else
                echo "docs.zip not found in $repo"
              fi
            fi
          done
          echo "All repositories processed, then building the website..."
          export BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Build date: $BUILD_DATE"
          npm run build-pdf
          npm run build-doc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Build output to publish to the `gh-pages` branch:
          publish_dir: ./root/build
          # The following lines assign commit authorship to the official
          # GH-Actions bot for deploys to `gh-pages` branch:
          # https://github.com/actions/checkout/issues/13#issuecomment-724415212
          # The GH actions bot is used by default if you didn't specify the two fields.
          # You can swap them out with your own user credentials.
          user_name: github-actions[bot]
          user_email: 41898282+github-actions[bot]@users.noreply.github.com