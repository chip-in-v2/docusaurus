type: object
description: |-
  仮想ホストは、特定のサブドメインに紐づくFQDNを持つWebサービスのエンドポイントであり、API Gateway内でリクエストを処理するためのルーティングチェーンと関連付けられる。
  各仮想ホストは、特定のサブドメインに属し、そのサブドメイン内で一意の名前を持つ。
  仮想ホストは、HTTPS通信を行うための証明書と秘密鍵を持ち、セキュアな通信を提供する。
required:
  - name
  - title
  - subdomain
  - routingChain
properties:
  name:
    type: string
    pattern: '^([a-z0-9][a-z0-9-]*|@)$'
    description: |-
      仮想ホストの名前。指定したサブドメインの名前と結合して FQDN を得ることができる。
      文字列は小文字英字、数字、ハイフンのみを含むことができる。
      たとえば、 www という仮想ホスト名でサブドメインの FQDN が example.com の場合、FQDN は www.example.com となる。
      特別なホスト名 "@" はサブドメインのFQDN そのものを仮想ホストの FQDN とすることを表す。
    example: www.stg
  title:
    type: string
    description: 仮想ホストの名称。
    example: CMSシステム
  description:
    type: string
    description: 仮想ホストの説明文。
    example: CMSシステムのWebUI を提供する仮想ホストです。
  realm:
    type: string
    readOnly: true
    format: urn
    description: |-
      この仮想ホストが属するレルムのURN。
    example: urn:chip-in:realm:example-realm
  urn:
    type: string
    readOnly: true
    format: urn
    description: |-
      仮想ホストのURN。形式は `urn:chip-in:virtual-host:{realm-name}:{virtual-host-name}` である。
    example: urn:chip-in:virtual-host:example-realm:www
  subdomain:
    type: string
    description: |-
      この仮想ホストが属するサブドメインのURN。
      仮想ホストのFQDNは、仮想ホストの名前とサブドメインの名前を結合して得られる。
      たとえば、 www という仮想ホスト名でサブドメインの FQDN が stg.example.com の場合、FQDN は www.stg.example.com となる。
      サブドメインは自身のレルムに属するものかサブドメインの貸出先に自身のレルムが指定されているものでなくてはならない。
    example: urn:chip-in:subdomain:example-realm:stg
  routingChain:
    type: string
    description: |-
      この仮想ホストに紐づくルーティングチェーンのURN。
      ルーティングチェーンは、リクエストの処理を行うためのルールの集合であり、リクエストを適切なマイクロサービスに転送するためのロジックを定義する。
    example: urn:chip-in:routing-chain:example-realm:cms-chain
  accessLogRecorder:
    type: string
    description: |-
      アクセスログを記録するサービスのURN。デフォルトでは標準出力に出力される。
    example: urn:chip-in:services:example-realm:access-log-service
  accessLogMaxValueLength:
    type: integer
    default: 512
    description: |-
      アクセスログの項目の値の最大長。デフォルトは 512 で、512文字を超える場合は切り捨てられる。
    example: 512
  accessLogFormat:
    type: object
    description: |-
      アクセスログ出力のフォーマット。1行1オブジェクトのJSON形式で出力される。
      以下の属性は常に出力される。
      |属性名|値|
      |--|--|
      |timestamp|ログの時刻|
      |category|"access-log" で固定|
      |host|仮想ホストのFQDN|
    example:
      method: "request.method"
      path: "request.path"
      status: "response.status"
      user: "request.user"
      groups: "request.groups"
      role: "request.role"
      clientIp: "request.clientIp"
      xff: "request.headers['X-Forwarded-For']"
      userAgent: "request.headers['User-Agent']"
      requestTime: "request.time"
      tat: "response.tat"
      upstreamStatus: "response.upstreamStatus"
      upsstreamTAT: "response.upstreamTAT"
    additionalProperties:
      type: string
      description: |-
        プロパティの値は、'{{' と '}}' で囲む必要はなく、全体が RHAI の式として評価される。
        RHAI の式内では、リクエストやレスポンスの情報を参照して値を算出することができる。
        ただし、結果が undefined や null の場合は "-" となる。
        また、値が文字列であり、かつ、その長さが maxValueLength を超える場合は切り捨てられ、最後に "...truncated" が付加される。
        数値や booleanの場合はそのまま出力される。オブジェクトや配列の場合は、JSON文字列に変換されて出力される。
  certificate:
    type: array
    items:
      type: string
      description: |-
        この仮想ホストのサーバ証明書。PEM形式の証明書を指定する。
        証明書は、HTTPS通信を行うために必要であり、仮想ホストが提供するサービスのセキュリティを確保する。
      example: |-
        -----BEGIN CERTIFICATE-----
        MIIDXTCCAkWgAwIBAgIJAL5z1Z2k5b4wMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV
        ...
        -----END CERTIFICATE-----
  key:
    type: string
    description: |-
      この仮想ホストのサーバ証明書の秘密鍵。PEM形式の秘密鍵を指定する。
      秘密鍵は、HTTPS通信を行うために必要であり、仮想ホストが提供するサービスのセキュリティを確保する。
    example: |-
      -----BEGIN RSA PRIVATE KEY-----
      MIIEpAIBAAKCAQEA7v1z1Z2k5b4wMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNVBAYT
      ...
      -----END RSA PRIVATE KEY-----
  disabled:
    type: boolean
    description: |-
      仮想ホストが無効化されているかどうかを示すフラグ。
      true の場合、仮想ホストは無効化されており、仮想ホストは削除され、アクセスは拒否される（TLSの場合、SSL_ERROR_HANDSHAKE_FAILURE を返し、平文の場合、400 Bad Request が返す）。
      false の場合、仮想ホストは有効であり、アクセスが可能である。
    example: false
additionalProperties: false
